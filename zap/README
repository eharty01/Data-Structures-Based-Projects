/**********************************************************
* Project 3: Zap
* CS 15
* README
*
* Eleanor Harty
* Nov. 8, 2023
*********************************************************/

Compile/run:
____________

Final Zap Compilation
    - compile using
        make
    - run using by writing on the command line
        ./zap (and an appropriate command and input/output files)

For Phase 1:
    - Compile using
        make
    - run with the unit_test command

Program Purpose:
________________
The purpose of this program is encode a text file given by the user. Or it can
also decode an encrypted file provided by the user into normal text again,
depending what the user requests and provides in the input and output files 
they give. 

Acknowledgements:
_________________
I got help from Kathy, Vedant, Arya, Ella, John, Ava, Eddy, Erin, Andersen, and
Alana.

Files:
______
HuffmanCoder.h:
    Interface of the HuffmanCoder class.

HuffmanCoder.cpp:
    Implementation of the HuffmanCoder class.

Makefile:
    Builds an executable for the assignment.

main.cpp:
    Calls my zap program to start.

unit_tests.h: 
    Unit tests for the phaseOne and some functions from the HuffmanCoder class.

README
    This file.

hi.txt
    Given file I used to diff test simple cases of zapping/unzapping and
    seeing if my program knew how to break ties.

banana_apple.txt:
    Given file I used to diff test simple cases of zapping/unzapping.

my_test.txt:
    A test file I created of medium length to test simple cases of zapping and
    unzapping.

all_conll_english.txt:
    Given file I used to diff test more complex cases of zappling/unzapping.

empty.txt:
    An empty file I created to see if my program cound handle being given an
    empty file correctly.

single_letter.txt:
    A file I created with a single character (a) to test if my program could
    handle a file with a single letter correctly.

single_letter_mulitplied.txt:
    A file I created with a single character repeated many times to test if my
    program cound handle with a one character that repeats correctly.

Data Structures:
________________
DataStructures:

For this project I used a variety of data structures including: vectors,
priority queues, pairs, and unordered_map. Vectors use contiguous storage for 
elements, internally they do this via dynamically allocated arrays, they can
carry out many different commands like push_back, erase, begin, size and front.
Some advantages of vectors is that they resize themselves dynamically and 
allocate/eallocate memory. They also provide quick access to elements. Finally,
a disadvantage of vectors are that inserting or removing elements not at the 
end is inefficient as you need to shift the ohter elements. I used vectors 
because they allowed the queue to be accessed and traversed via iterators
(though I didn't wind up using this feature it's definitely advantageous to 
ensure you have the option since normally you could only have access to the top
of a priority queue). My vector was within a priority queue which is a data
structure used to store key value pairs it operates much like a normal queue
in that you can only access the front but within the priority queue the "first
in line" will always be the element with the highest priority (i.e. the highest
or the lowest value, depending on the priority queue is being applied). This
made it a great choice for building Huffman Trees because we want to build the
tree from the leafs, naturally the leafs will be given the a higher frequency
than internal nodes and you can store your leaves first and work to build
parent nodes for them from there. It gives you access to these high priority
items first where as other data structures like a stack or queue could not
contain the information of a tree as well because they couldn't store the
leaves 'next to each other' as they wouldn't necessarily be added to the queue
that way. That is the major advantage of priority queues is that they give you
fast access to elements at ideal O(1) complexity, and these elements can be
ordered in the way you want to access them based on their relative importance.
However, a strong disadvantage of the priority queue is that unless modified 
you can only access the front of them.

I also used unorded maps which provide a great lookup time (since they're 
implemented using a hash table the have an average constant time complexity), 
to find the elments they have stored in the key value format. The advantage of 
unorded maps is mostly that they're very efficient at looking up things which 
is why I chose them for this project as they could provide quick access to the
codes I had made based on where each letter was stored in the tree. However, a
disadvantage of unordered_map is that since they are not stored in any specific
order they it is difficult to iterate through the unordered_map in an orderd or
logical way. Finally, I used pair which was particularly useful for this 
project as it features the ability to store two items together. A pair is a 
container for two elements of the same or different data types and the reason
why this was helpful for my project is that I needed to store the two outputs
of the readfile function from BinaryIO and this allowed me to get store of them.
This is the main advantage of pairs, that you can store disparate items at the
same time. One of their drawbacks is probably that there is a very limited
number of operations you can perform on them (you can mostly just access their
size or details about the pair).

Algorithms:

For this program some algorithms I used included count_freqs and build_tree. 
count_freq worked by creating an array of all possible characters, and as a
while loop read through the provided file each time a new character was pulled
the character was converted to it's integer form as an ASCII value, this value
was used as the index of the array and the value at that index (which was
initialized as 0) was raised by one. This allowed the program to keep track
of how many times a character occurred and it would push a new node onto the
priority queue (which was ordered by frequency). Finally, the program would 
loop through the array again to see if it had been modified at all. If it 
hadn't been it would return the boolean value false to indicate the file 
provided was empty otherwise it would return true. Based on the information
provided in count_freqs I could then build a Huffman Tree from the bottom up
by first joining the nodes with a highest frequencies by taking the top of the 
queue then popping it once it had been passed to left and right respectively.
With that it could then build a parent node to connect these left and right
leaves. It recursively progressed through this process until there was only
one element left on the top of the stack which it would return as the root node
of the tree.

Testing:
________
phaseOne:
    For phaseOne I mostly used unit testing, I tried to consider all the cases
    count_freqs might encounter so I tested it with an empty string, a string 
    of one character. A string of multiple characters and a string of odd
    characters you wouldn't normally see. It passed all these tests so I moved
    on to serialize. I tested serialize on an empty tree, a tree with one node,
    a small tree, and the tree given in the spec. I had to if statements to my
    function to catch an empty tree (specifically to check if the root was
    a nullpointer), but other than that it also seemed to work fairly well.
    Finally, I tested my deserialize function. I was told for this one we don't
    have to worry about an empty tree so I didn't test for that and since it 
    first checks for leaves I knew it would implicitly catch the one node case.
    First I tried to build a small tree and print it out, which I guess isn't
    a unit test in the traditional sense but I wanted to see what my program
    was doing and if it was even remotely right which it wasn't. Basically I 
    realized I that after I found a leaf (designated in the string by L), I
    needed to get the next character in the string which would be the actual
    letter instead of immediately making a node with the current character
    because I wanted the letter not the position it was in. After that my tree
    seemed to look good so I used the given treeEqual function to compare it to
    the tree given in the spec. I did this because I figured that tree
    basically represented as complicated as deserializing was going to get 
    since it has some depth, and if it was able to recur a couple times through
    logically the recursion should work for bigger trees. So I compared the
    trees and it worked after I had fixed the issue mentioned above.

zap:
    For zap I used some unit tests but mostly relied on diffing. I did this 
    because a lot of my functions were reused from phaseOne where I had already
    unit tested them. The two functions I did unit test were the functions
    I used to build my HuffmanTree and to create the codes that led to each
    leaf of the HuffmanTree. I did this because I found these functions to be
    both extremely important and tricky so I wrote a unit test for each using
    the given example as I thought it was a good idea of the complexity most
    autograder tests would demand and I would use diffing to figure out edge
    cases. Surprisingly these both seemed to work well once I got them to 
    compile and there was only other function in encoder that wasn't 
    already from phaseOne or given so I decided to start diff testing zap as I 
    knew if there was a problem I could look at that function first. At first
    my program kept seg faulting and saying I was trying to access data that
    didn't exist. I eventually realized this was because while I tried to make
    declare the root in my .h file and assign it in my .cpp the assignment
    wasn't working and so I would up making root a local variable and that
    fixed the seg faults. Now my program was diffing for the normal text files
    (like hi.txt, banana_apple.txt, my_test.txt, and all_conll_English.txt).
    However, there was still memory leakage, finally figured out it was coming
    from my post_order_delete function because I had just copied it from 
    phaseOne and didn't think to revise 'root' which I had previously used as 
    variable/parameter to a local variable. 
    
    Once I fixed that the memory leaks stopped and I moved on to edge cases. I
    tried giving it a file it couldn't open and a single character file
    (single_letter.txt and single_letter_multiplied.txt) and it passed those. 
    It also passed cases where a user provided too many files, but failed cases
    where a user provided an empty file or too few files. I fixed the case of
    too few files by declaring which arguments were which filenames after
    checking that there were enough filenames. The empty file was a bit
    trickier but I eventually realized I could go through my array in count
    frequencies and if nothing had been updated the file must be empty, so I
    made count_freqs return a boolean based on whether the file was empty
    or not and printed my error message based on that result. Finally I began
    to test decoding, I didn't write unit tests as there were only two
    functions so I felt between valgrind and diffing it was easier to spot the
    bugs that way. Decoding worked for all cases and edge cases except the 
    ones involving one type of character (i.e., single_letter.txt and 
    single_letter_multiplied.txt). For this I made a one_letter function
    that was called when the root was a leaf and it would go through the length
    of the encoded text and print the letter for each character of the given
    encoded text. After that it was able deserialize all the cases I tried.

Time Spent:
___________
I spent about 6 hours on phase one.

I spent roughly 12 hours on part 2, so around 18 hours on the project total.